1. What is React? How is it different from other JS frameworks?

React is an open-source JavaScript library created by Facebook for building complex,
interactive UIs in web and mobile applications. It is often referred to as just the “V”
(View) in an “MVC” architecture. Therefore it has no opinions on the other pieces of your
technology stack and can be seamlessly integrated into any application.

AngularJS (1.x) approaches building an application by extending HTML markup and injecting
various constructs (e.g. Directives, Controllers, Services) at runtime. As a result, AngularJS
is very opinionated about the greater architecture of your application — these abstractions
are certainly useful in some cases, but in many situations, they come at the cost of flexibility.

By contrast, React focuses exclusively on the creation of components, and has few (if any)
opinions about an application’s architecture. This allows a developer an incredible amount
of flexibility in choosing the architecture they deem “best” — though it also places the
responsibility of choosing (or building) those parts on the developer.


What happens during the lifecycle of a React component?

At the highest level, React components have lifecycle events that fall into three general categories:

Initialization
State/Property Updates
Destruction
Every React component defines these events as a mechanism for managing its properties, state, and
rendered output. Some of these events only happen once, others happen more frequently; understanding
these three general categories should help you clearly visualize when certain logic needs to be applied.

For example, a component may need to add event listeners to the DOM when it first mounts.
However, it should probably remove those event listeners when the component unmounts from the
DOM so that irrelevant processing does not occur.
