Explain OAuth.

OAuth is an authentication protocol that allows you to approve one
application interacting with another on your behalf without giving away your password.


The Actors

There are 3 main players in an OAuth transaction: the user, the consumer,
and the service provider.  This triumvirate has been affectionately deemed
the OAuth Love Triangle.

In our example, Joe is the user, Bitly is the consumer, and Twitter is
the service provided who controls Joe’s secure resource (his Twitter stream).
Joe would like Bitly to be able to post shortened links to his stream.
Here’s how it works:

Step 1 – The user shows intent

Joe (User): “Hey, Bitly, I would like you to be able to post links directly to my Twitter stream.”
Bitly (Consumer): “Great! Let me go ask for permission.”

Step 2 – The consumer gets permission

Bitly: “I have a user that would like me to post to his stream. Can I have a request token?”
Twitter (Service Provider): “Sure.  Here’s a token and a secret.”

The secret is used to prevent request forgery.  The consumer uses the secret
to sign each request so that the service provider can verify it is actually
coming from the consumer application.

Step 3 – The user is redirected to the service provider

Bitly: “OK, Joe.  I’m sending you over to Twitter so you can approve.  Take this token with you.”
Joe: “OK!”

<Bitly directs Joe to Twitter for authorization>

Note: This is the scary part.  If Bitly were super-shady Evil Co. it could
pop up a window that looked like Twitter but was really phishing for your
username and password.  Always be sure to verify that the URL you’re directed
to is actually the service provider (Twitter, in this case).

Step 4 – The user gives permission

Joe: “Twitter, I’d like to authorize this request token that Bitly gave me.”
Twitter: “OK, just to be sure, you want to authorize Bitly to do X, Y, and Z with your Twitter account?”
Joe: “Yes!”
Twitter: “OK, you can go back to Bitly and tell them they have permission to use their request token.”

Twitter marks the request token as “good-to-go,” so when the consumer requests
access, it will be accepted (so long as it’s signed using their shared secret).

Step 5 – The consumer obtains an access token

Bitly: “Twitter, can I exchange this request token for an access token?”
Twitter: “Sure.  Here’s your access token and secret.”

Step 6 – The consumer accesses the protected resource

Bitly: “I’d like to post this link to Joe’s stream.  Here’s my access token!”
Twitter: “Done!”

Recap

In our scenario, Joe never had to share his Twitter credentials with Bitly.
He simply delegated access using OAuth in a secure manner.  At any time,
Joe can login to Twitter and review the access he has granted and revoke
tokens for specific applications without affecting others.  OAuth also allows
for granular permission levels.  You can give Bitly the right to post to
your Twitter account, but restrict LinkedIn to read-only access.
